rgl_init <- function(new.device = FALSE, bg = "white", width = 640) {
if( new.device | rgl.cur() == 0 ) {
rgl.open()
par3d(windowRect = 50 + c( 0, 0, width, width ) )
rgl.bg(color = bg )
}
rgl.clear(type = c("shapes", "bboxdeco"))
rgl.viewpoint(theta = 15, phi = 20, zoom = 0.7)
}
# x, y, z : numeric vectors corresponding to
#  the coordinates of points
# axis.col : axis colors
# xlab, ylab, zlab: axis labels
# show.plane : add axis planes
# show.bbox : add the bounding box decoration
# bbox.col: the bounding box colors. The first color is the
# the background color; the second color is the color of tick marks
rgl_add_axes <- function(x, y, z, axis.col = "grey",
xlab = "", ylab="", zlab="", show.plane = TRUE,
show.bbox = FALSE, bbox.col = c("#333377","black"))
{
lim <- function(x){c(-max(abs(x)), max(abs(x))) * 1.1}
# Add axes
xlim <- lim(x); ylim <- lim(y); zlim <- lim(z)
rgl.lines(xlim, c(0, 0), c(0, 0), color = axis.col)
rgl.lines(c(0, 0), ylim, c(0, 0), color = axis.col)
rgl.lines(c(0, 0), c(0, 0), zlim, color = axis.col)
# Add a point at the end of each axes to specify the direction
axes <- rbind(c(xlim[2], 0, 0), c(0, ylim[2], 0),
c(0, 0, zlim[2]))
rgl.points(axes, color = axis.col, size = 3)
# Add axis labels
rgl.texts(axes, text = c(xlab, ylab, zlab), color = axis.col,
adj = c(0.5, -0.8), size = 2)
# Add plane
if(show.plane)
xlim <- xlim/1.1; zlim <- zlim /1.1
rgl.quads( x = rep(xlim, each = 2), y = c(0, 0, 0, 0),
z = c(zlim[1], zlim[2], zlim[2], zlim[1]))
# Add bounding box decoration
if(show.bbox){
rgl.bbox(color=c(bbox.col[1],bbox.col[2]), alpha = 0.5,
emission=bbox.col[1], specular=bbox.col[1], shininess=5,
xlen = 3, ylen = 3, zlen = 3)
}
}
# Ejemplo que ilustra el modelo de clasificación usando una variable
datos <-data.frame(y=as.numeric(as.numeric(iris$Species)),
x4=iris$Sepal.Width,
x1=iris$Sepal.Length,
x2=iris$Petal.Length,
x3=iris$Petal.Width)
library(splines)
model3 <- glm(y~ns(x2,16), data =datos)
b <- predict(model3, datos)
rb <- round(b)
x <- seq(1,7,0.01)
x <- rbind(x2=x,y=0)
x <-t(x)
x <-as.data.frame(x)
xy <- predict(model3, newdata = x)
rxy <-round(xy)
plot(datos$x2, datos$y, col = datos$y, xlab = "Longitud del Sépalo", ylab = "Tipo de Iris", title("Specie ~ ns(Petal.Length,16)"))
lines(x[,1],xy,col=ifelse(xy<=1.5, "black", ifelse(xy<=2.5, "red", "green")))
segments(datos$x2,datos$y,datos$x2,b, col=datos$y, lty=4)
abline(2.5,0,col="green")
abline(1.5,0,col="red")
# Ejemplo que ilustra el modelo de clasificación en base a 2 variables
model3 <- glm(y~ns(x2,16)+ns(x1,16), data =datos)
c <- predict(model3, newdata = datos)
plot(datos$x2,datos$x1,col=round(c),pch=0,
xlab = "Longitud del Sépalo", ylab = "Longitud del Pétalo", title("Specie ~ ns(Petal.Length,16)+ns(Sepal.Length,16)"))
points(datos$x2,datos$x1,col=datos$y,pch="x")
#### Ilustrar como se distribuye los espacios de clasificación
plantilla <-matrix(c(0,0,0),ncol=3)
for (p1 in seq(1,8,0.05))
for (p2 in seq(1,7,0.05))
plantilla <-rbind(plantilla, c(x1=p1,x2=p2,y=0))
plantilla <- as.data.frame(plantilla)
plantilla[,3] <- predict(model3, newdata = plantilla)
plot(datos$x2,datos$x1,col=round(c),pch=0,
xlab = "Longitud del Sépalo", ylab = "Longitud del Pétalo", title("Specie ~ ns(Petal.Length,16)+ns(Sepal.Length,16)"))
points(plantilla$x2,plantilla$x1,
col= ifelse(round(plantilla$y)<1, 0, ifelse(round(plantilla$y)>3, 0, round(plantilla$y) )),pch=20)
points(datos$x2,datos$x1,col=round(c),pch=0)
points(datos$x2,datos$x1,col=datos$y,pch="x")
# Ejemplo que ilustra el modelo de clasificación en base a 3 variables
model3 <- glm(y~ns(x2,16)+ns(x1,16)+ns(x3,16), data =datos)
c <- predict(model3, newdata = datos)
plantilla <-matrix(c(0,0,0,0),ncol=4)
for (p1 in seq(1,8,(8-1)/10))
for (p2 in seq(1,7,(7-1)/10))
for (p3 in seq(0, 2.5, 2.5/10 ))
plantilla <-rbind(plantilla, c(x1=p1,x2=p2,x3=p3,y=0))
plantilla <- as.data.frame(plantilla)
plantilla[,4] <- round(predict(model3, newdata = plantilla))
plantilla[,4] <- ifelse(plantilla[,4]<1,"white", ifelse(plantilla[,4]>3,"white",plantilla[,4]))
#saca la grafica en 3d
library(rgl)
rgl_init()
rgl.spheres(x=datos$x2, y=datos$x1, z=datos$x3, r=0.1, col=datos$y)
rgl_add_axes(x=datos$x2, y=datos$x1, z=datos$x3, show.bbox = T)
aspect3d(1,1,1)
#### Ilustra como se distribuyen los espacios de clasificación
rgl_init()
rgl.spheres(x=plantilla[,1], y=plantilla[,2], z=plantilla[,3], r=0.1, col=plantilla[,4])
#rgl_add_axes(x=plantilla[,1], y=plantilla[,2], z=plantilla[,3], show.bbox = T)
aspect3d(1,1,1)
plot3d(x=plantilla[,1], y=plantilla[,2], z=plantilla[,3], col=plantilla[,4])
rgl_init()
rgl.spheres(x=plantilla[,1], y=plantilla[,2], z=plantilla[,3], r=0.1, col=plantilla[,4])
rgl_add_axes(x=plantilla[,1], y=plantilla[,2], z=plantilla[,3], show.bbox = T)
aspect3d(1,1,1)
plot3d(x=plantilla[,1], y=plantilla[,2], z=plantilla[,3], col=plantilla[,4])
library(tree)
summary(iris)
# Construir un arbol que clasifica la especie en base al resto de variables
tree.iris = tree(Species~.,iris)
library(tree)
install.packages("tree")
summary(iris)
# Construir un arbol que clasifica la especie en base al resto de variables
tree.iris = tree(Species~.,iris)
library(tree)
summary(iris)
# Construir un arbol que clasifica la especie en base al resto de variables
tree.iris = tree(Species~.,iris)
summary(tree.iris)
plot(tree.iris)
text(tree.iris, pretty=0)
tree.iris
# Dividir en training y test
set.seed (2)
train=sample (1:nrow(iris), 100)
iris.test=iris [-train ,]
# Construyo el arbol sobre el conjunto de entrenamiento
tree.iris =tree(Species~. ,iris ,subset =train )
# Aplico el arbol sobre el conjunto de test
tree.pred =predict (tree.iris ,iris.test ,type ="class")
# Visualizo la matriz de confusion
table(tree.pred , iris.test[,5])
# Podar el arbol usando cv
set.seed (3)
cv.iris = cv.tree(tree.iris ,FUN=prune.misclass )
names(cv.iris )
cv.iris
# Pintamos el error
par(mfrow =c(1,2))
plot(cv.iris$size ,cv.iris$dev ,type="b")
plot(cv.iris$k ,cv.iris$dev ,type="b")
# Ahora podamos el arbol con prune.misclass
prune.iris =prune.misclass (tree.iris ,best =3)
par(mfrow =c(1,1))
plot(prune.iris)
text(prune.iris ,pretty =0)
# Como se comportara este arbol en su capacidad de prediccion
tree.pred=predict (prune.iris , iris.test ,type="class")
table(tree.pred ,iris.test[,5])
# Ahora podemos modificar el tamanio del arbol modificando best
prune.iris =prune.misclass (tree.iris ,best =4)
plot(prune.iris)
text(prune.iris ,pretty =0)
tree.pred=predict (prune.iris , iris.test ,type="class")
table(tree.pred ,iris.test[,5])
# Random Forest
library (randomForest)
set.seed (1)
bag.iris = randomForest(Species~., data=iris, subset=train)
bag.iris
yhat.bag = predict (bag.iris ,newdata =iris.test)
yhat.bag
# Construyo una funcion para calcular el acierto a partir del RandomForest
acierto <- function(bag.datos){
return (sum (sapply(1:length(bag.datos$y), function(x){
if (is.na(bag.datos$predicted[x])){
0
}
else if (as.numeric(bag.datos$y[x])==as.numeric(bag.datos$predicted[x])){
1
}
else{
0
}
}))/length(bag.datos$y))
}
resul = as.data.frame(cbind(predicted = yhat.bag, y=iris.test[,5]))
acierto(resul)
# Fijando el numero de arboles
bag.iris = randomForest(Species~.,data=iris ,subset =train , ntree=25)
bag.iris
acierto(bag.iris)
bag.func = randomForest(formula,data=datos,ntree=num_trees)
bag.func = randomForest(formula,data=datos,subset=train,ntree=num_trees)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
bag.func = randomForest(formula,data=datos,subset=train,ntree=num_trees)
acierto(bag.func)
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
sapply(1:num_trees, function(x){
bag.func = randomForest(formula,data=datos,subset=train,ntree=x)
acierto(bag.func)
})
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
vec <- sapply(1:num_trees, function(x){
bag.func = randomForest(formula,data=datos,subset=train,ntree=x)
acierto(bag.func)
})
}
Graphical_RF(iris,Species~.,100)
vec
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
vec <- sapply(1:num_trees, function(x){
bag.func = randomForest(formula,data=datos,subset=train,ntree=x)
acierto(bag.func)
})
vec
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
vec <- sapply(1:num_trees, function(x){
bag.func = randomForest(formula,data=datos,subset=train,ntree=x)
acierto(bag.func)
})
plot(1:num_trees,vec)
}
Graphical_RF(iris,Species~.,100)
lines()
lines(vec)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
vec <- sapply(1:num_trees, function(x){
bag.func = randomForest(formula,data=datos,subset=train,ntree=x)
acierto(bag.func)
})
plot(1:num_trees,vec)
lines(vec)
}
Graphical_RF(iris,Species~.,100)
summary(iris)
summary(Auto)
Auto
Autos
summary(Autos)
library(ISLR)
summary(Autos)
summary(Auto)
dim(Auto)
dim(iris)
set.seed (2)
train=sample (1:nrow(Auto), 300)
datos = Auto
Graphical_RF(datos,origin~.-name,100)
train=sample (1:nrow(iris), 100)
set.seed (2)
train=sample (1:nrow(iris), 100)
dagS <- model2network("[AEstudiosMadre][BEstudiosPadre][DIngresosMadre|AEstudiosMadre][CIngresosPadre|BEstudiosPadre][TIngresosTotalesFamilia|DIngresosMadre]")
library(bnlearn)
dagS <- model2network("[AEstudiosMadre][BEstudiosPadre][DIngresosMadre|AEstudiosMadre][CIngresosPadre|BEstudiosPadre][TIngresosTotalesFamilia|DIngresosMadre]")
graphviz.plot(dagS)
dagS <- model2network("[A][B][D|A][C|B][T|D:C]")
graphviz.plot(dagS)
dagS <- model2network("[A][B][D|A][C|B][T|D:C][E|T][G|T][H|T][F|T]")
graphviz.plot(dagS)
dagS <- model2network("[A][B][D|A][C|B][T|D:C][E|T][G|T][H|T][F|T][V|H:G][J|E:I]")
dagS <- model2network("[A][B][D|A][C|B][T|D:C][E|T][G|T][H|T][F|T][V|H:G][I][J|E:I]")
graphviz.plot(dagS)
dagS <- model2network("[A][B][D|A][C|B][T|D:C][E|T][G|T][H|T][I][F|T][V|H:G][J|E:I]")
graphviz.plot(dagS)
A.st <- c("Altos", "Medios", "Bajos")
A.prob <- array(c(0.35, 0.55, 0.10), dim=3,
dimnames = list(A = A.st))
A.prob
B.st <- c("Altos", "Medios", "Bajos")
B.prob <- array(c(0.35, 0.55, 0.10), dim=3,
dimnames = list(B = B.st))
B.prob
D.st <- c("Altos", "Medios", "Bajos")
D.prob <- array(c(0.8, 0.17, 0.03, 0.55, 0.4, 0.05, 0.1, 0.35, 0.55), dim=c(3,3),
dimnames = list(D = D.st, A.st))
D.prob
D.prob <- array(c(0.8, 0.17, 0.03, 0.55, 0.4, 0.05, 0.1, 0.35, 0.55), dim=c(3,3),
dimnames = list(D = D.st, A = A.st))
D.prob
C.st <- c("Altos", "Medios", "Bajos")
C.prob <- array(c(0.85, 0.13, 0.02, 0.7, 0.26, 0.04, 0.2, 0.45, 0.35), dim=c(3,3),
dimnames = list(C = C.st, B = B.st))
C.prob
T.st <- c("Altos", "Medios", "Bajos")
T.st <- c("Altos", "Medios", "Bajos")
T.prob <- array(c(0.95, 0.04, 0.01, 0.82, 0.15, 0.03, 0.76, 0.2, 0.04, 0.9, 0.07, 0.03,
0.95, 0.04, 0.01, 0.82, 0.15, 0.03, 0.76, 0.2, 0.04, 0.9, 0.07, 0.03)
, dim = c(3,8), dimnames = list(T = T.st, D = D.st, C=C.st))
T.prob <- array(c(0.95, 0.04, 0.01, 0.82, 0.15, 0.03, 0.76, 0.2, 0.04, 0.9, 0.07, 0.03,
0.95, 0.04, 0.01, 0.82, 0.15, 0.03, 0.76, 0.2, 0.04, 0.9, 0.07, 0.03)
, dim = c(3,3,3), dimnames = list(T = T.st, D = D.st, C=C.st))
T.prob
T.prob <- array(c(0.95, 0.04, 0.01, 0.82, 0.15, 0.03, 0.76, 0.2, 0.04, 0.9, 0.07, 0.03,
0.35, 0.5, 0.15, 0.2, 0.35, 0.45, 0.65, 0.3, 0.05, 0.25, 0.35, 0.4, 0.05, 0.3, 0.65)
, dim = c(3,3,3), dimnames = list(T = T.st, D = D.st, C=C.st))
T.prob
H.st <- c("Más de dos", "Dos", "Uno", "Ninguno")
H.prob <- array(c(0.2, 0.3, 0.35, 0.15,
0.15, 0.3, 0.35, 0.2,
0.05, 0.2, 0.5, 0.25),
dim = c(4,3), dimnames = list(H = H.st, T = T.st))
H.prob
G.st <- c("Altos", "Medios", "Bajos")
G.prob <- array(c(0.55, 0.4, 0.05,
0.4, 0.35, 0.25,
0.15, 0.35, 0.5),
dim = c(3,3), dimnames = list(G=G.st, T= T.st))
G.prob
V.st <- c("Si", "No")
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75)
dim = c(2,12), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75)
dim = c(2,6,2), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75)
dim = c(2,4,3), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75),
dim = c(2,4,3), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75),
dim = c(2,3,4), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75),
dim = c(2,4,3), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75),
dim = c(2,3,4), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob
T.prob
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75),
dim = c(2,3,4), dimnames = list(V=V.st, H=H.st, G = G.st))
V.prob
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75),
dim = c(2,4,3), dimnames = list(V=V.st, H=H.st, G = G.st))
V.prob
E.st <- c("Presente", "Ausente")
E.prob <- array(c(0.85, 0.15,
0.7, 0.3,
0.55, 0.45),
dim = c(2,3), dimnames = list(E=E.st, T=T.st))
E.prob
I.st <- c("Si", "No")
I.prob <- array(c(0.65, 0.35), dim=c(2,1), dimnames = list(I=I.st))
I.prob
A.prob
I.prob <- array(c(0.65, 0.35), dim=2, dimnames = list(I=I.st))
I.prob
F.st <- c("Más de uno", "Uno", "Ninguno")
F.prob <- array(c(0.65, 0.3, 0.05,
0.35, 0.45, 0.2,
0.15, 0.4, 0.45),
dim = c(3,3), dimnames = list(F=F.st, T=T.st))
F.prob
J.st <- c("Si", "No")
J.prob <- array(c(0.8, 0.2,
0.7, 0.3,
0.18, 0.82,
0.05,0.95),
dim = c(2,2,2), dimnames = list(J=J.st, E=E.st, I=I.st))
J.prob
J.prob <- array(c(0.8, 0.2,
0.7, 0.3,
0.18, 0.82,
0.05,0.95),
dim = c(2,2,2), dimnames = list(J=J.st, I=I.st, E=E.st))
J.prob
modelstring(dagS)
cpt <- list(A=A.prob, B=B.prob, D=D.prob, C=C.prob, T=T.prob, E=E.prob, F=F.prob, I=I.prob,
G=G.prob, H=H.prob, J=J.prob, V=V.prob)
bn <- custom.fit(dagS,cpt)
nparams(bn)
arcs(bn)
bn$T
bn$V
bn
junction <- compile(as.grain(bn))
library(gRain)
junction <- compile(as.grain(bn))
querygrain(junction, nodes="T")$T
jTAltos <- setEvidence(junction, nodes="T", states="Altos")
querygrain(jTAltos, nodes="T")$T
jAAltos <- setEvidence(junction, nodes="A", states="Altos")
querygrain(jAAltos, nodes="T")$T
querygrain(junction, nodes="T")$T
querygrain(jAAltos, nodes="T")$T
querygrain(junction, nodes=V)$V
querygrain(junction, nodes="V")$V
jHDos <- setEvidence(junction, nodes="H", states = "Dos")
querygrain(jHDos, nodes="V")$V
jGH <- setEvidence(jHDos, nodes="G", states="Altos")
querygrain(jGH, nodes="V")$V
querygrain(junction, nodes="J")$J
jTAltos <- setEvidence(junction, nodes="T", states="Altos")
querygrain(jTAltos, nodes="J")$J
jIT <- setEvidence(jTAltos, nodes="I", states="Si")
querygrain(jIT, nodes="J")$J
dsep(bn, x="F", y="J", z="T")
dsep(bn, x="E", y="I", z="J")
dsep(bn, x="B", y="V", z="G")
source('~/Dropbox/zMaster/zRStudio/Master-en-Ciencia-De-Datos-e-Ingeniería-de-Computadores-2/3 Modelos Graficos Probabilisticos/DAGSerafin.R', echo=TRUE)
source('~/Dropbox/zMaster/zRStudio/Master-en-Ciencia-De-Datos-e-Ingeniería-de-Computadores-2/3 Modelos Graficos Probabilisticos/PracticaAndresCano.R', echo=TRUE)
setwd("~/Dropbox/zMaster/zRStudio/Master-en-Ciencia-De-Datos-e-Ingeniería-de-Computadores-2/3 Modelos Graficos Probabilisticos")
source('~/Dropbox/zMaster/zRStudio/Master-en-Ciencia-De-Datos-e-Ingeniería-de-Computadores-2/3 Modelos Graficos Probabilisticos/PracticaAndresCano.R', echo=TRUE)
