plot(cv.iris$k ,cv.iris$dev ,type="b")
# Ahora podamos el arbol con prune.misclass
prune.iris =prune.misclass (tree.iris ,best =3)
par(mfrow =c(1,1))
plot(prune.iris)
text(prune.iris ,pretty =0)
# Como se comportara este arbol en su capacidad de prediccion
tree.pred=predict (prune.iris , iris.test ,type="class")
table(tree.pred ,iris.test[,5])
# Ahora podemos modificar el tamanio del arbol modificando best
prune.iris =prune.misclass (tree.iris ,best =4)
plot(prune.iris)
text(prune.iris ,pretty =0)
tree.pred=predict (prune.iris , iris.test ,type="class")
table(tree.pred ,iris.test[,5])
# Random Forest
library (randomForest)
set.seed (1)
bag.iris = randomForest(Species~., data=iris, subset=train)
bag.iris
yhat.bag = predict (bag.iris ,newdata =iris.test)
yhat.bag
# Construyo una funcion para calcular el acierto a partir del RandomForest
acierto <- function(bag.datos){
return (sum (sapply(1:length(bag.datos$y), function(x){
if (is.na(bag.datos$predicted[x])){
0
}
else if (as.numeric(bag.datos$y[x])==as.numeric(bag.datos$predicted[x])){
1
}
else{
0
}
}))/length(bag.datos$y))
}
resul = as.data.frame(cbind(predicted = yhat.bag, y=iris.test[,5]))
acierto(resul)
# Fijando el numero de arboles
bag.iris = randomForest(Species~.,data=iris ,subset =train , ntree=25)
bag.iris
acierto(bag.iris)
bag.func = randomForest(formula,data=datos,ntree=num_trees)
bag.func = randomForest(formula,data=datos,subset=train,ntree=num_trees)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
bag.func = randomForest(formula,data=datos,subset=train,ntree=num_trees)
acierto(bag.func)
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
sapply(1:num_trees, function(x){
bag.func = randomForest(formula,data=datos,subset=train,ntree=x)
acierto(bag.func)
})
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
vec <- sapply(1:num_trees, function(x){
bag.func = randomForest(formula,data=datos,subset=train,ntree=x)
acierto(bag.func)
})
}
Graphical_RF(iris,Species~.,100)
vec
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
vec <- sapply(1:num_trees, function(x){
bag.func = randomForest(formula,data=datos,subset=train,ntree=x)
acierto(bag.func)
})
vec
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
vec <- sapply(1:num_trees, function(x){
bag.func = randomForest(formula,data=datos,subset=train,ntree=x)
acierto(bag.func)
})
plot(1:num_trees,vec)
}
Graphical_RF(iris,Species~.,100)
lines()
lines(vec)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
vec <- sapply(1:num_trees, function(x){
bag.func = randomForest(formula,data=datos,subset=train,ntree=x)
acierto(bag.func)
})
plot(1:num_trees,vec)
lines(vec)
}
Graphical_RF(iris,Species~.,100)
summary(iris)
summary(Auto)
Auto
Autos
summary(Autos)
library(ISLR)
summary(Autos)
summary(Auto)
dim(Auto)
dim(iris)
set.seed (2)
train=sample (1:nrow(Auto), 300)
datos = Auto
Graphical_RF(datos,origin~.-name,100)
train=sample (1:nrow(iris), 100)
set.seed (2)
train=sample (1:nrow(iris), 100)
dagS <- model2network("[AEstudiosMadre][BEstudiosPadre][DIngresosMadre|AEstudiosMadre][CIngresosPadre|BEstudiosPadre][TIngresosTotalesFamilia|DIngresosMadre]")
library(bnlearn)
dagS <- model2network("[AEstudiosMadre][BEstudiosPadre][DIngresosMadre|AEstudiosMadre][CIngresosPadre|BEstudiosPadre][TIngresosTotalesFamilia|DIngresosMadre]")
graphviz.plot(dagS)
dagS <- model2network("[A][B][D|A][C|B][T|D:C]")
graphviz.plot(dagS)
dagS <- model2network("[A][B][D|A][C|B][T|D:C][E|T][G|T][H|T][F|T]")
graphviz.plot(dagS)
dagS <- model2network("[A][B][D|A][C|B][T|D:C][E|T][G|T][H|T][F|T][V|H:G][J|E:I]")
dagS <- model2network("[A][B][D|A][C|B][T|D:C][E|T][G|T][H|T][F|T][V|H:G][I][J|E:I]")
graphviz.plot(dagS)
dagS <- model2network("[A][B][D|A][C|B][T|D:C][E|T][G|T][H|T][I][F|T][V|H:G][J|E:I]")
graphviz.plot(dagS)
A.st <- c("Altos", "Medios", "Bajos")
A.prob <- array(c(0.35, 0.55, 0.10), dim=3,
dimnames = list(A = A.st))
A.prob
B.st <- c("Altos", "Medios", "Bajos")
B.prob <- array(c(0.35, 0.55, 0.10), dim=3,
dimnames = list(B = B.st))
B.prob
D.st <- c("Altos", "Medios", "Bajos")
D.prob <- array(c(0.8, 0.17, 0.03, 0.55, 0.4, 0.05, 0.1, 0.35, 0.55), dim=c(3,3),
dimnames = list(D = D.st, A.st))
D.prob
D.prob <- array(c(0.8, 0.17, 0.03, 0.55, 0.4, 0.05, 0.1, 0.35, 0.55), dim=c(3,3),
dimnames = list(D = D.st, A = A.st))
D.prob
C.st <- c("Altos", "Medios", "Bajos")
C.prob <- array(c(0.85, 0.13, 0.02, 0.7, 0.26, 0.04, 0.2, 0.45, 0.35), dim=c(3,3),
dimnames = list(C = C.st, B = B.st))
C.prob
T.st <- c("Altos", "Medios", "Bajos")
T.st <- c("Altos", "Medios", "Bajos")
T.prob <- array(c(0.95, 0.04, 0.01, 0.82, 0.15, 0.03, 0.76, 0.2, 0.04, 0.9, 0.07, 0.03,
0.95, 0.04, 0.01, 0.82, 0.15, 0.03, 0.76, 0.2, 0.04, 0.9, 0.07, 0.03)
, dim = c(3,8), dimnames = list(T = T.st, D = D.st, C=C.st))
T.prob <- array(c(0.95, 0.04, 0.01, 0.82, 0.15, 0.03, 0.76, 0.2, 0.04, 0.9, 0.07, 0.03,
0.95, 0.04, 0.01, 0.82, 0.15, 0.03, 0.76, 0.2, 0.04, 0.9, 0.07, 0.03)
, dim = c(3,3,3), dimnames = list(T = T.st, D = D.st, C=C.st))
T.prob
T.prob <- array(c(0.95, 0.04, 0.01, 0.82, 0.15, 0.03, 0.76, 0.2, 0.04, 0.9, 0.07, 0.03,
0.35, 0.5, 0.15, 0.2, 0.35, 0.45, 0.65, 0.3, 0.05, 0.25, 0.35, 0.4, 0.05, 0.3, 0.65)
, dim = c(3,3,3), dimnames = list(T = T.st, D = D.st, C=C.st))
T.prob
H.st <- c("Más de dos", "Dos", "Uno", "Ninguno")
H.prob <- array(c(0.2, 0.3, 0.35, 0.15,
0.15, 0.3, 0.35, 0.2,
0.05, 0.2, 0.5, 0.25),
dim = c(4,3), dimnames = list(H = H.st, T = T.st))
H.prob
G.st <- c("Altos", "Medios", "Bajos")
G.prob <- array(c(0.55, 0.4, 0.05,
0.4, 0.35, 0.25,
0.15, 0.35, 0.5),
dim = c(3,3), dimnames = list(G=G.st, T= T.st))
G.prob
V.st <- c("Si", "No")
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75)
dim = c(2,12), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75)
dim = c(2,6,2), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75)
dim = c(2,4,3), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75),
dim = c(2,4,3), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75),
dim = c(2,3,4), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75),
dim = c(2,4,3), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75),
dim = c(2,3,4), dimnames = list(V=V.st, G = G.st, H=H.st))
V.prob
T.prob
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75),
dim = c(2,3,4), dimnames = list(V=V.st, H=H.st, G = G.st))
V.prob
V.prob <- array(c(0.95, 0.05,
0.8, 0.2,
0.75, 0.25,
0.55, 0.45,
0.8, 0.2,
0.7,0.3,
0.65, 0.35,
0.4, 0.6,
0.65, 0.35,
0.55, 0.45,
0.4, 0.6,
0.25, 0.75),
dim = c(2,4,3), dimnames = list(V=V.st, H=H.st, G = G.st))
V.prob
E.st <- c("Presente", "Ausente")
E.prob <- array(c(0.85, 0.15,
0.7, 0.3,
0.55, 0.45),
dim = c(2,3), dimnames = list(E=E.st, T=T.st))
E.prob
I.st <- c("Si", "No")
I.prob <- array(c(0.65, 0.35), dim=c(2,1), dimnames = list(I=I.st))
I.prob
A.prob
I.prob <- array(c(0.65, 0.35), dim=2, dimnames = list(I=I.st))
I.prob
F.st <- c("Más de uno", "Uno", "Ninguno")
F.prob <- array(c(0.65, 0.3, 0.05,
0.35, 0.45, 0.2,
0.15, 0.4, 0.45),
dim = c(3,3), dimnames = list(F=F.st, T=T.st))
F.prob
J.st <- c("Si", "No")
J.prob <- array(c(0.8, 0.2,
0.7, 0.3,
0.18, 0.82,
0.05,0.95),
dim = c(2,2,2), dimnames = list(J=J.st, E=E.st, I=I.st))
J.prob
J.prob <- array(c(0.8, 0.2,
0.7, 0.3,
0.18, 0.82,
0.05,0.95),
dim = c(2,2,2), dimnames = list(J=J.st, I=I.st, E=E.st))
J.prob
modelstring(dagS)
cpt <- list(A=A.prob, B=B.prob, D=D.prob, C=C.prob, T=T.prob, E=E.prob, F=F.prob, I=I.prob,
G=G.prob, H=H.prob, J=J.prob, V=V.prob)
bn <- custom.fit(dagS,cpt)
nparams(bn)
arcs(bn)
bn$T
bn$V
bn
junction <- compile(as.grain(bn))
library(gRain)
junction <- compile(as.grain(bn))
querygrain(junction, nodes="T")$T
jTAltos <- setEvidence(junction, nodes="T", states="Altos")
querygrain(jTAltos, nodes="T")$T
jAAltos <- setEvidence(junction, nodes="A", states="Altos")
querygrain(jAAltos, nodes="T")$T
querygrain(junction, nodes="T")$T
querygrain(jAAltos, nodes="T")$T
querygrain(junction, nodes=V)$V
querygrain(junction, nodes="V")$V
jHDos <- setEvidence(junction, nodes="H", states = "Dos")
querygrain(jHDos, nodes="V")$V
jGH <- setEvidence(jHDos, nodes="G", states="Altos")
querygrain(jGH, nodes="V")$V
querygrain(junction, nodes="J")$J
jTAltos <- setEvidence(junction, nodes="T", states="Altos")
querygrain(jTAltos, nodes="J")$J
jIT <- setEvidence(jTAltos, nodes="I", states="Si")
querygrain(jIT, nodes="J")$J
dsep(bn, x="F", y="J", z="T")
dsep(bn, x="E", y="I", z="J")
dsep(bn, x="B", y="V", z="G")
library(RWeka)
install.packages("RWeka")
library(RWeka)
install.packages("RWeka")
install.packages("RWeka")
java
java -version
install.packages("RWeka")
install.packages("RWeka")
library(rjava)
library(rJava)
.jinit()
.jcall()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
install.packages(rJava)
install.packages("rJava")
install.packages("rJava")
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
library(rJava)
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
update(rJava)
update("rJava")
setwd("~/Dropbox/zMaster/zRStudio/Master-en-Ciencia-De-Datos-e-Ingeniería-de-Computadores-2/3 Mineria de Datos, Aspectos Avanzados/Clasificacion monotona")
library("foreign")
datos <- read.arff("lev.arff")
summary(datos)
clases = as.integer(unique(datos$Out1))
clases
length(clases)
datos$Out1 = as.factor(datos$Out1)
indices.clase.1 <- which(datos$Out1==clases[1])
indices.clase.2 <- which(datos$Out1==clases[2])
indices.clase.3 <- which(datos$Out1==clases[3])
indices.clase.4 <- which(datos$Out1==clases[4])
indices.clase.5 <- which(datos$Out1==clases[5])
iri<-iris
iri$Species <- revalue(iri$Species, c("setosa"="1", "versicolor"="2", "virginica"="3"))
library(plyr)
iri<-iris
iri$Species <- revalue(iri$Species, c("setosa"="1", "versicolor"="2", "virginica"="3"))
iri
clases=as.integer(unique(iri$Species))
clases
indices<-which(iris$Species==clases[1])
indices
indices<-which(iri$Species==clases[1])
indices
y=as.integer(iri$Species)
y
y[indices]<-0
y= ifelse(y==0,0,1)
y
y=as.integer(iri$Species)
y
y[indices]<-0
y
p1 <- as.integer(datos$Out1)
p1[indices.clase.1]<-0
p1 = ifelse(p1==0,0,1)
data1 = cbind(datos[,1:4],target1=as.factor(p1))
sapply(data1,class)
indices.clase.1 <- which(datos$Out1==clases[1])
indices.clase.2 <- c(indices.clase.1, which(datos$Out1==clases[2]))
indices.clase.3 <- c(indices.clase.2, which(datos$Out1==clases[3]))
indices.clase.4 <- c(indices.clase.3, which(datos$Out1==clases[4]))
indices.clase.5 <- c(indices.clase.4, which(datos$Out1==clases[5]))
indices.clase.1
clases
clases = as.integer(unique(datos$Out1))
clases
length(clases)
datos$Out1 = as.factor(datos$Out1)
indices.clase.1 <- which(datos$Out1==clases[1])
indices.clase.2 <- c(indices.clase.1, which(datos$Out1==clases[2]))
indices.clase.3 <- c(indices.clase.2, which(datos$Out1==clases[3]))
indices.clase.4 <- c(indices.clase.3, which(datos$Out1==clases[4]))
indices.clase.5 <- c(indices.clase.4, which(datos$Out1==clases[5]))
indices.clase.1 <- which(datos$Out1==clases[1])
indices.clase.2 <- c(indices.clase.1, which(datos$Out1==clases[2]))
indices.clase.3 <- c(indices.clase.2, which(datos$Out1==clases[3]))
indices.clase.4 <- c(indices.clase.3, which(datos$Out1==clases[4]))
indices.clase.5 <- c(indices.clase.4, which(datos$Out1==clases[5]))
indices.1 <- which(datos$Out1==clases[1])
indices.2 <- c(indices.1, which(datos$Out1==clases[2]))
indices.3 <- c(indices.2, which(datos$Out1==clases[3]))
indices.4 <- c(indices.3, which(datos$Out1==clases[4]))
library("foreign")
datos <- read.arff("lev.arff")
summary(datos)
clases = as.integer(unique(datos$Out1))
clases
length(clases)
datos$Out1 = as.factor(datos$Out1)
indices.1 <- which(datos$Out1==clases[1])
indices.2 <- c(indices.1, which(datos$Out1==clases[2]))
indices.3 <- c(indices.2, which(datos$Out1==clases[3]))
indices.4 <- c(indices.3, which(datos$Out1==clases[4]))
indices.5 <- c(indices.4, which(datos$Out1==clases[5]))
p1 <- as.integer(datos$Out1)
p1[indices.1]<-0
p1 = ifelse(p1==0,0,1)
p2 <- as.integer(datos$Out1)
p2[indices.2]<-0
p2 = ifesle(p2==0,0,1)
p2 = ifelse(p2==0,0,1)
data2 = cbind(datos[,1:4],target2=as.factor(p2))
p3 <- as.integer(datos$Out1)
p3[indices.3]<-0
p3 = ifelse(p3==0,0,1)
p4 <- as.integer(datos$Out1)
p4[indices.4]<-0
p4 = ifelse(p4==0,0,1)
data3 = cbind(datos[,1:4],target3=as.factor(p3))
data1 = cbind(datos[,1:4],target1=as.factor(p1))
data2 = cbind(datos[,1:4],target2=as.factor(p2))
data3 = cbind(datos[,1:4],target3=as.factor(p3))
data4 = cbind(datos[,1:4],target4=as.factor(p4))
library(RWeka)
modelo1 <- J48(target1 ~., data = data1)
modelo1
modelo2 <- J48(target2 ~., data = data2)
modelo2
modelo3 <- J48(target3 ~., data = data3)
modelo3
modelo4 <- J48(target4 ~., data = data4)
modelo4
evaluacion.modelo.1 <- evaluate_Weka_classifier(modelo1, numFolds = 10, complexity = FALSE, class = TRUE)
evaluacion.modelo.1
evaluacion.modelo.2 <- evaluate_Weka_classifier(modelo1, numFolds = 10, complexity = FALSE, class = TRUE)
evaluacion.modelo.2
evaluacion.modelo.3 <- evaluate_Weka_classifier(modelo1, numFolds = 10, complexity = FALSE, class = TRUE)
evaluacion.modelo.3
evaluacion.modelo.4 <- evaluate_Weka_classifier(modelo1, numFolds = 10, complexity = FALSE, class = TRUE)
evaluacion.modelo.4
datos[500,3]
prediccion1 <- predict(modelo1,datos[500,1:4],type="probability")
prediccion1
prediccion2 <- predict(modelo2,datos[500,1:4],type="probability")
prediccion2
prediccion3 <- predict(modelo3,datos[500,1:4],type="probability")
prediccion3
prediccion4 <- predict(modelo4,datos[500,1:4],type="probability")
prediccion4
clases[1]
clases[2]
clases[3]
clases[4]
indices.1.clase3 <- which(datos$Out1==clases[1])
indices.2.clase3y2 <- c(indices.1, which(datos$Out1==clases[2]))
indices.3.clases3y2y0 <- c(indices.2, which(datos$Out1==clases[3]))
indices.4.clases3y2y0y4 <- c(indices.3, which(datos$Out1==clases[4]))
