modelo <- lista.modelos[[1]]
evaluacion <- evaluate_Weka_classifier(aaas, numFolds = 10, complexity = FALSE, class = TRUE)
CrearEvaluacionDeModelos = function(lista.modelo, clases.totales){
lista.salida <- NULL
for (i in 1:(length(clases.totales)-1)){
evaluacion <- evaluate_Weka_classifier(lista.modelos[[i]], numFolds = 10, complexity = FALSE, class = TRUE)
if (i==1){
lista.salida <- list(evaluacion)
} else {
lista.salida <- c(lista.salida, list(evaluacion))
}
}
return(lista.salida)
}
lista.evaluaciones <- CrearEvaluacionDeModelos(lista.modelos,clases)
evaluacion.modelo.1
lista.predicciones <- RealizarPrediccion(lista.modelos, datos, 500)
RealizarPrediccion = function(lista.modelo, fichero.datos, elemento){
lista.salida <- list(fichero.datos[elemento,(dim(fichero.datos)[2])])
for (i in 1:((dim(fichero.datos)[2])-1)){
prediccion <- predict(lista.modelo[[i]],fichero.datos[elemento,1:(dim(fichero.datos)-1)],type="probability")
lista.salida <- c(lista.salida, list(prediccion))
}
return(lista.salida)
}
lista.predicciones <- RealizarPrediccion(lista.modelos, datos, 500)
lista.evaluaciones <- CrearEvaluacionDeModelos(lista.modelos,clases)
l <- lista.modelos[[1]]
RealizarPrediccion = function(lista.modelo, fichero.datos, elemento){
lista.salida <- list(fichero.datos[elemento,(dim(fichero.datos)[2])])
for (i in 1:((dim(fichero.datos)[2])-1)){
prediccion <- predict(lista.modelo[[i]],fichero.datos[elemento,1:(dim(fichero.datos)[2]-1)],type="probability")
lista.salida <- c(lista.salida, list(prediccion))
}
return(lista.salida)
}
lista.predicciones <- RealizarPrediccion(lista.modelos, datos, 500)
lista.predicciones
length(lista.predicciones)
ExplicarPrediccion = function(lista.prediccion, elemento, clases.totales){
print("Tenemos que el elemento")
print(elemento)
print("Pertenece a la clase")
print(lista.prediccion[[1]])
for (i in 2:(length(lista.prediccion))){
print("Siendo la prediccion")
lista.prediccion[[i]]
print("Y las clases que pertenecen al 0: ")
for (j in 1:(i-1)){
print(clases.totales[j])
}
}
}
ExplicarPrediccion(lista.predicciones, 500, clases)
ExplicarPrediccion = function(lista.prediccion, elemento, clases.totales){
print("Tenemos que el elemento")
print(elemento)
print("Pertenece a la clase")
print(lista.prediccion[[1]])
for (i in 2:(length(lista.prediccion))){
print("Siendo la prediccion")
print(lista.prediccion[[i]])
print("Y las clases que pertenecen al 0: ")
for (j in 1:(i-1)){
print(clases.totales[j])
}
}
}
ExplicarPrediccion(lista.predicciones, 500, clases)
ExplicarPrediccion = function(lista.prediccion, elemento, clases.totales){
print("Tenemos que el elemento")
print(elemento)
print("Pertenece a la clase")
print(lista.prediccion[[1]])
for (i in 2:(length(lista.prediccion))){
print("Siendo la prediccion")
print(lista.prediccion[[i]])
print("Y las clases que pertenecen al 0: ")
for (j in 1:(i-1)){
print(clases.totales[j])
}
print("\n")
}
}
ExplicarPrediccion(lista.predicciones, 500, clases)
print("")
print()
help(print)
lista.predicciones[[2]]
lista.predicciones[[2]][1]
ExplicarPrediccion = function(lista.prediccion, elemento, clases.totales){
print("Tenemos que el elemento")
print(elemento)
print("Pertenece a la clase")
print(lista.prediccion[[1]])
clase.a.la.que.pertenece <- lista.prediccion[[1]]
pertenece.al.0 <- FALSE
for (i in 2:(length(lista.prediccion))){
print("Siendo la prediccion")
print(lista.prediccion[[i]])
print("Y las clases que pertenecen al 0: ")
for (j in 1:(i-1)){
print(clases.totales[j])
if (clase.a.la.que.pertenece == clases.totales[j])
pertenece.al.0 = TRUE
}
if (pertenece.al.0 & (lista.prediccion[[i]][1] > 0.5)){
print("Por lo que pertenece a 0 y se hace una buena predicción al ser superior al 0.5")
} else {
print("No se realiza una buena predicción al pertenecer a 0 y no ser la predicción superior al 0.5")
}
}
}
ExplicarPrediccion(lista.predicciones, 500, clases)
ExplicarPrediccion = function(lista.prediccion, elemento, clases.totales){
print("Tenemos que el elemento")
print(elemento)
print("Pertenece a la clase")
print(lista.prediccion[[1]])
clase.a.la.que.pertenece <- lista.prediccion[[1]]
pertenece.al.0 <- FALSE
for (i in 2:(length(lista.prediccion))){
print("Siendo la prediccion")
print(lista.prediccion[[i]])
print("Y las clases que pertenecen al 0: ")
for (j in 1:(i-1)){
print(clases.totales[j])
if (clase.a.la.que.pertenece == clases.totales[j])
pertenece.al.0 = TRUE
}
if (pertenece.al.0 & (lista.prediccion[[i]][1] > 0.5)){
print("Por lo que pertenece a 0 y se hace una buena predicción al ser superior al 0.5")
} else if (pertenece.al.0){
print("No se realiza una buena predicción al pertenecer a 0 y no ser la predicción superior al 0.5")
}
}
}
ExplicarPrediccion(lista.predicciones, 500, clases)
ExplicarPrediccion = function(lista.prediccion, elemento, clases.totales){
print("Tenemos que el elemento")
print(elemento)
print("Pertenece a la clase")
print(lista.prediccion[[1]])
clase.a.la.que.pertenece <- lista.prediccion[[1]]
pertenece.al.0 <- FALSE
for (i in 2:(length(lista.prediccion))){
print("Siendo la prediccion")
print(lista.prediccion[[i]])
print("Y las clases que pertenecen al 0: ")
for (j in 1:(i-1)){
print(clases.totales[j])
if (clase.a.la.que.pertenece == clases.totales[j])
pertenece.al.0 = TRUE
}
if (pertenece.al.0 & (lista.prediccion[[i]][1] > 0.5)){
print("Por lo que pertenece a 0 y se hace una buena predicción al ser superior al 0.5")
} else if (pertenece.al.0){
print("No se realiza una buena predicción al pertenecer a 0 y no ser la predicción superior al 0.5")
} else if (lista.prediccion[[i]][2] > 0.5){
print("Se hace una buena predicción al pertenecer a 1 y ser superior a 0.5")
} else
print("No se hace una buena predicción al pertenecer a 1 y no ser superior a 0.5")
}
}
ExplicarPrediccion(lista.predicciones, 500, clases)
print(n)
print()
print
print;
print()
print(0)
print( )
length(lista.evaluaciones)
salida.funcion.lectura <- LecturaYPreprocesado("esl.arff")
datos <- salida.funcion.lectura[[1]]
clases <- salida.funcion.lectura[[2]]
clases
lista.con.los.indices <- ObtenerIndices(datos,clases)
lista.con.la.seleccion.de.clases <- SeleccionDeClases(datos,clases,lista.con.los.indices)
lista.data.frames.binarios <- CreacionDataFramesBinarios(datos,clases,lista.con.la.seleccion.de.clases)
lista.modelos <- CreacionDeLosModelos(lista.data.frames.binarios, clases)
lista.evaluaciones <- CrearEvaluacionDeModelos(lista.modelos,clases)
for(i in 1:(length(lista.evaluaciones))){
print(lista.evaluaciones[[i]])
}
lista.predicciones <- RealizarPrediccion(lista.modelos, datos, 500)
lista.predicciones
lista.predicciones <- RealizarPrediccion(lista.modelos, datos, 300)
lista.predicciones
ExplicarPrediccion(lista.predicciones, 300, clases)
salida.funcion.lectura <- LecturaYPreprocesado("esl.arff")
LecturaYPreprocesado = function(fichero){
datos <- read.arff(fichero)
datos[dim(datos)[2]]
clases = as.integer(unique(datos[[dim(datos)[2]]]))
datos[[dim(datos)[2]]] = as.factor(datos[[dim(datos)[2]]])
return(list(datos,clases))
}
ObtenerIndices = function(fichero.datos,clases.totales){
lista <- NULL
for (i in 1:(length(clases.totales)-1)){
if (i==1){
indices <- which(fichero.datos[[dim(fichero.datos)[2]]]==clases.totales[i])
lista <- list(indices)
} else {
indices <- c(lista[[length(lista)]], which(fichero.datos[[dim(fichero.datos)[2]]]==clases.totales[i]))
lista <- c(lista, list(indices))
}
}
return(lista)
}
SeleccionDeClases = function(fichero.datos, clases.totales,lista){
lista.salida <- NULL
for (i in 1:(length(clases.totales)-1)){
p <- as.integer(datos[[dim(datos)[2]]])
p[lista[[i]]]<-0
p <- ifelse(p==0,0,1)
if (i==1){
lista.salida <- list(p)
} else {
lista.salida <- c(lista.salida, list(p))
}
}
return(lista.salida)
}
CreacionDataFramesBinarios = function(fichero.datos, clases.totales,lista.clases){
lista.salida <- NULL
for (i in 1:(length(clases.totales)-1)){
data <- cbind(fichero.datos[,1:(dim(fichero.datos)[2]-1)],target=as.factor(lista.clases[[i]]))
if (i==1){
lista.salida <- list(data)
} else {
lista.salida <- c(lista.salida, list(data))
}
}
return(lista.salida)
}
CreacionDeLosModelos = function(lista.data.frames,clases.totales){
lista.salida <- NULL
for (i in 1:(length(clases.totales)-1)){
modelo <- J48(target ~., data = lista.data.frames[[i]])
if (i==1){
lista.salida <- list(modelo)
} else {
lista.salida <- c(lista.salida, list(modelo))
}
}
return(lista.salida)
}
CrearEvaluacionDeModelos = function(lista.modelo, clases.totales){
lista.salida <- NULL
for (i in 1:(length(clases.totales)-1)){
evaluacion <- evaluate_Weka_classifier(lista.modelo[[i]], numFolds = 10, complexity = FALSE, class = TRUE)
if (i==1){
lista.salida <- list(evaluacion)
} else {
lista.salida <- c(lista.salida, list(evaluacion))
}
}
return(lista.salida)
}
RealizarPrediccion = function(lista.modelo, fichero.datos, elemento){
lista.salida <- list(fichero.datos[elemento,(dim(fichero.datos)[2])])
for (i in 1:((dim(fichero.datos)[2])-1)){
prediccion <- predict(lista.modelo[[i]],fichero.datos[elemento,1:(dim(fichero.datos)[2]-1)],type="probability")
lista.salida <- c(lista.salida, list(prediccion))
}
return(lista.salida)
}
ExplicarPrediccion = function(lista.prediccion, elemento, clases.totales){
print("Tenemos que el elemento")
print(elemento)
print("Pertenece a la clase")
print(lista.prediccion[[1]])
clase.a.la.que.pertenece <- lista.prediccion[[1]]
pertenece.al.0 <- FALSE
for (i in 2:(length(lista.prediccion))){
print("Siendo la prediccion")
print(lista.prediccion[[i]])
print("Y las clases que pertenecen al 0: ")
for (j in 1:(i-1)){
print(clases.totales[j])
if (clase.a.la.que.pertenece == clases.totales[j])
pertenece.al.0 = TRUE
}
if (pertenece.al.0 & (lista.prediccion[[i]][1] > 0.5)){
print("Por lo que pertenece a 0 y se hace una buena predicción al ser superior al 0.5")
} else if (pertenece.al.0){
print("No se realiza una buena predicción al pertenecer a 0 y no ser la predicción superior al 0.5")
} else if (lista.prediccion[[i]][2] > 0.5){
print("Se hace una buena predicción al pertenecer a 1 y ser superior a 0.5")
} else
print("No se hace una buena predicción al pertenecer a 1 y no ser superior a 0.5")
}
}
salida.funcion.lectura <- LecturaYPreprocesado("esl.arff")
datos <- salida.funcion.lectura[[1]]
clases <- salida.funcion.lectura[[2]]
clases
lista.con.los.indices <- ObtenerIndices(datos,clases)
lista.con.los.indices
lista.con.la.seleccion.de.clases <- SeleccionDeClases(datos,clases,lista.con.los.indices)
lista.con.la.seleccion.de.clases
lista.data.frames.binarios <- CreacionDataFramesBinarios(datos,clases,lista.con.la.seleccion.de.clases)
lista.data.frames.binarios
lista.modelos <- CreacionDeLosModelos(lista.data.frames.binarios, clases)
lista.modelos
lista.evaluaciones <- CrearEvaluacionDeModelos(lista.modelos,clases)
lista.evaluaciones
lista.predicciones <- RealizarPrediccion(lista.modelos, datos, 300)
lista.predicciones
lista.modelo = lista.modelos
fichero.datos = datos
elemento = 300
lista.salida <- list(fichero.datos[elemento,(dim(fichero.datos)[2])])
lista.salida
i=1
prediccion <- predict(lista.modelo[[i]],fichero.datos[elemento,1:(dim(fichero.datos)[2]-1)],type="probability")
prediccion
lista.salida <- c(lista.salida, list(prediccion))
i=1+i
prediccion <- predict(lista.modelo[[i]],fichero.datos[elemento,1:(dim(fichero.datos)[2]-1)],type="probability")
prediccion
lista.salida <- c(lista.salida, list(prediccion))
i=1+i
prediccion <- predict(lista.modelo[[i]],fichero.datos[elemento,1:(dim(fichero.datos)[2]-1)],type="probability")
prediccion
lista.salida <- c(lista.salida, list(prediccion))
i=1+i
prediccion <- predict(lista.modelo[[i]],fichero.datos[elemento,1:(dim(fichero.datos)[2]-1)],type="probability")
prediccion
lista.salida <- c(lista.salida, list(prediccion))
dim(fichero.datos)[2]
length(lista.modelo)
RealizarPrediccion = function(lista.modelo, fichero.datos, elemento){
lista.salida <- list(fichero.datos[elemento,(dim(fichero.datos)[2])])
for (i in 1:(length(lista.modelo)){
prediccion <- predict(lista.modelo[[i]],fichero.datos[elemento,1:(dim(fichero.datos)[2]-1)],type="probability")
lista.salida <- c(lista.salida, list(prediccion))
}
return(lista.salida)
}
RealizarPrediccion = function(lista.modelo, fichero.datos, elemento){
lista.salida <- list(fichero.datos[elemento,(dim(fichero.datos)[2])])
for (i in 1:(length(lista.modelo)){
RealizarPrediccion = function(lista.modelo, fichero.datos, elemento){
lista.salida <- list(fichero.datos[elemento,(dim(fichero.datos)[2])])
for (i in 1:(length(lista.modelo))){
prediccion <- predict(lista.modelo[[i]],fichero.datos[elemento,1:(dim(fichero.datos)[2]-1)],type="probability")
lista.salida <- c(lista.salida, list(prediccion))
}
return(lista.salida)
}
lista.predicciones <- RealizarPrediccion(lista.modelos, datos, 300)
lista.predicciones
ExplicarPrediccion(lista.predicciones, 300, clases)
lista.predicciones
LecturaYPreprocesado = function(fichero){
datos <- read.arff(fichero)
datos[dim(datos)[2]]
clases = as.integer(unique(datos[[dim(datos)[2]]]))
datos[[dim(datos)[2]]] = as.factor(datos[[dim(datos)[2]]])
return(list(datos,clases))
}
ObtenerIndices = function(fichero.datos,clases.totales){
lista <- NULL
for (i in 1:(length(clases.totales)-1)){
if (i==1){
indices <- which(fichero.datos[[dim(fichero.datos)[2]]]==clases.totales[i])
lista <- list(indices)
} else {
indices <- c(lista[[length(lista)]], which(fichero.datos[[dim(fichero.datos)[2]]]==clases.totales[i]))
lista <- c(lista, list(indices))
}
}
return(lista)
}
SeleccionDeClases = function(fichero.datos, clases.totales,lista){
lista.salida <- NULL
for (i in 1:(length(clases.totales)-1)){
p <- as.integer(datos[[dim(datos)[2]]])
p[lista[[i]]]<-0
p <- ifelse(p==0,0,1)
if (i==1){
lista.salida <- list(p)
} else {
lista.salida <- c(lista.salida, list(p))
}
}
return(lista.salida)
}
CreacionDataFramesBinarios = function(fichero.datos, clases.totales,lista.clases){
lista.salida <- NULL
for (i in 1:(length(clases.totales)-1)){
data <- cbind(fichero.datos[,1:(dim(fichero.datos)[2]-1)],target=as.factor(lista.clases[[i]]))
if (i==1){
lista.salida <- list(data)
} else {
lista.salida <- c(lista.salida, list(data))
}
}
return(lista.salida)
}
CreacionDeLosModelos = function(lista.data.frames,clases.totales){
lista.salida <- NULL
for (i in 1:(length(clases.totales)-1)){
modelo <- J48(target ~., data = lista.data.frames[[i]])
if (i==1){
lista.salida <- list(modelo)
} else {
lista.salida <- c(lista.salida, list(modelo))
}
}
return(lista.salida)
}
CrearEvaluacionDeModelos = function(lista.modelo, clases.totales){
lista.salida <- NULL
for (i in 1:(length(clases.totales)-1)){
evaluacion <- evaluate_Weka_classifier(lista.modelo[[i]], numFolds = 10, complexity = FALSE, class = TRUE)
if (i==1){
lista.salida <- list(evaluacion)
} else {
lista.salida <- c(lista.salida, list(evaluacion))
}
}
return(lista.salida)
}
RealizarPrediccion = function(lista.modelo, fichero.datos, elemento){
lista.salida <- list(fichero.datos[elemento,(dim(fichero.datos)[2])])
for (i in 1:(length(lista.modelo))){
prediccion <- predict(lista.modelo[[i]],fichero.datos[elemento,1:(dim(fichero.datos)[2]-1)],type="probability")
lista.salida <- c(lista.salida, list(prediccion))
}
return(lista.salida)
}
ExplicarPrediccion = function(lista.prediccion, elemento, clases.totales){
print("Tenemos que el elemento")
print(elemento)
print("Pertenece a la clase")
print(lista.prediccion[[1]])
clase.a.la.que.pertenece <- lista.prediccion[[1]]
pertenece.al.0 <- FALSE
predicciones.buenas = 0
predicciones.malas = 0
for (i in 2:(length(lista.prediccion))){
print("Siendo la prediccion")
print(lista.prediccion[[i]])
print("Y las clases que pertenecen al 0: ")
for (j in 1:(i-1)){
print(clases.totales[j])
if (clase.a.la.que.pertenece == clases.totales[j])
pertenece.al.0 = TRUE
}
if (pertenece.al.0 & (lista.prediccion[[i]][1] > 0.5)){
print("Por lo que pertenece a 0 y se hace una buena predicción al ser superior al 0.5")
predicciones.buenas = predicciones.buenas + 1
} else if (pertenece.al.0){
print("No se realiza una buena predicción al pertenecer a 0 y no ser la predicción superior al 0.5")
predicciones.malas = predicciones.malas + 1
} else if (lista.prediccion[[i]][2] > 0.5){
print("Se hace una buena predicción al pertenecer a 1 y ser superior a 0.5")
predicciones.buenas = predicciones.buenas + 1
} else {
print("No se hace una buena predicción al pertenecer a 1 y no ser superior a 0.5")
predicciones.malas = predicciones.malas + 1
}
}
print("En total tenemos ")
print(predicciones.buenas)
print("predicciones buenas y ")
print(predicciones.malas)
print("predicciones malas.")
}
salida.funcion.lectura <- LecturaYPreprocesado("esl.arff")
datos <- salida.funcion.lectura[[1]]
clases <- salida.funcion.lectura[[2]]
clases
lista.con.los.indices <- ObtenerIndices(datos,clases)
lista.con.la.seleccion.de.clases <- SeleccionDeClases(datos,clases,lista.con.los.indices)
lista.data.frames.binarios <- CreacionDataFramesBinarios(datos,clases,lista.con.la.seleccion.de.clases)
lista.modelos <- CreacionDeLosModelos(lista.data.frames.binarios, clases)
lista.evaluaciones <- CrearEvaluacionDeModelos(lista.modelos,clases)
for(i in 1:(length(lista.evaluaciones))){
print(lista.evaluaciones[[i]])
}
elemento.elegido = 300
lista.predicciones <- RealizarPrediccion(lista.modelos, datos, elemento.elegido)
lista.predicciones
ExplicarPrediccion(lista.predicciones, elemento.elegido, clases)
lista.modelos
library(class)
CreacionDeLosModelos = function(lista.data.frames,clases.totales,clasificador.J48=TRUE){
lista.salida <- NULL
for (i in 1:(length(clases.totales)-1)){
if (clasificador.J48 == TRUE){
modelo <- J48(target ~., data = lista.data.frames[[i]])
} else {
modelo <- ctree(target ~., data = lista.data.frames[[i]])
}
if (i==1){
lista.salida <- list(modelo)
} else {
lista.salida <- c(lista.salida, list(modelo))
}
}
return(lista.salida)
}
lista.modelos <- CreacionDeLosModelos(lista.data.frames.binarios, clases)
lista.modelos <- CreacionDeLosModelos(lista.data.frames.binarios, clases,FALSE)
library(party)
lista.modelos <- CreacionDeLosModelos(lista.data.frames.binarios, clases,FALSE)
lista.evaluaciones <- CrearEvaluacionDeModelos(lista.modelos,clases)
